// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id        Int      @id @default(autoincrement())
  fullname  String
  email     String
  password  String
  role      Role     @default(USER)
  lastLogin DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  Subject Subject[]
}

model StudentInfomation {
  id          String   @id @default(uuid())
  studentId   String   @unique
  idCard      String?  @unique
  firstname   String
  lastname    String
  studentType Int      @default(1)
  isLoggedIn  Boolean  @default(false)
  lineUserId  String?  @unique
  addedAt     DateTime @default(now())
  updatedAt   DateTime @default(now())

  StudentGrade StudentGrade[]
  ClassJoined  ClassJoined[]

}

model StudentGrade {
  id        String            @id @default(uuid())
  studentId String
  grade     String //
  gradeType String?
  subjectId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
  Student   StudentInfomation @relation(fields: [studentId], references: [id])
  Subject   Subject           @relation(fields: [subjectId], references: [subjectId])
}

model Subject {
  id           String         @id @default(uuid())
  subjectId    String         @unique
  subjectName  String
  semester     String
  teacherId    Int
  StudentGrade StudentGrade[]
  Teacher      Users          @relation(fields: [teacherId], references: [id])
  ClassJoined  ClassJoined[]
}

// ข้อมูลช่วงเวลาที่ User ขอข้อมูล / สอบถาม
model MessageLog {
  id        String   @id @default(uuid())
  userId    String // user ที่สอบถามเข้ามา
  message   String // ข้อความที่สอบถามเข้ามา
  isCorrect Boolean  @default(false) // ข้อความถูกต้องหรือใหม่
  createdAt DateTime @default(now()) // ช่วงเวลาทีระบบได้รับข้อมูล
}

model ClassJoined {
  id            String   @id @default(uuid())
  studentId     String
  subjectId     String
  hasOverAbsent Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  Student StudentInfomation @relation(fields: [studentId], references: [id])
  Subject Subject           @relation(fields: [subjectId], references: [subjectId])
}

model MessageAutoSend {
  id         String   @id @default(uuid())
  teacherId  String //ADMIN
  message    String
  timeToSend DateTime
  isSent     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model AutoPublish {
  id            String   @id @default(uuid())
  timeToPublish DateTime
  semester      String
  isPublished   Boolean  @default(false)
  updatedAt     DateTime @default(now())
}

enum Role {
  ADMIN
  USER
  TEACHER
}
